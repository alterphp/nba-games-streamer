#!/usr/bin/env php
<?php
require __DIR__.'/../vendor/autoload.php';

use Chrisyue\PhpM3u8\Facade\ParserFacade;
use Chrisyue\PhpM3u8\Stream\TextStream;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpClient\CurlHttpClient as HttpClient;
use Symfony\Component\Process\Process;

const LASTCALL_FILEPATH = '%s/.sports-stream/.last-call';
const PLAYLIST_REGEXP_PATTERN = '@source: \'(https?://[0-9A-Za-z./-]+/playlist\.m3u8)\',@';

static $sports = [
    'nba' => [
        'search-uri' => 'http://givemenbastreams.com/nba.php?g=%s',
        'teams' => [
            'ATL' => 'hawks',
            'BOS' => 'celtics',
            'CHA' => 'hornets',
            'CHI' => 'bulls',
            'CLE' => 'cavaliers',
            'DAL' => 'mavericks',
            'DEN' => 'nuggets',
            'DET' => 'pistons',
            'GSW' => 'warriors',
            'HOU' => 'rockets',
            'IND' => 'pacers',
            'LAC' => 'clippers',
            'LAL' => 'lakers',
            'MEM' => 'grizzlies',
            'MIA' => 'heat',
            'MIL' => 'bucks',
            'MIN' => 'timberwolves',
            'NOP' => 'pelicans',
            'NYK' => 'knicks',
            'OKC' => 'thunder',
            'ORL' => 'magic',
            'PHI' => '76ers',
            'PHO' => 'suns',
            'POR' => 'blazers',
            'SAC' => 'kings',
            'SAS' => 'spurs',
            'TOR' => 'raptors',
            'UTA' => 'jazz',
            'WAS' => 'wizards',
        ],
    ],
    'f1' => [
        'search-uri' => 'http://givemereddit.stream/formula-1/f1-live-stream',
    ],
];

(new SingleCommandApplication())
    ->setDescription('Search sport event streams to play with OMX Player')
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($sports) {
        $io = new SymfonyStyle($input, $output);
        $questionHelper = $this->getHelper('question');
        $lastCall = getLastCall();
        $callArgs = [];

        $sportQuestion = new ChoiceQuestion(
            \sprintf('Select your sport [<comment>%s</comment>]', $lastCall['sport'] ?? '?'),
            \array_keys($sports),
            $lastCall['sport'] ?? null
        );
        $sport = $questionHelper->ask($input, $output, $sportQuestion);
        $callArgs['sport'] = $sport;

        $client = new HttpClient();

        // Each case must define a m3u8 master $playlistUri.
        switch ($sport) {
            case 'nba':
                // First list, current day games
                $nbaGames = listNbaDayGames($client, $sports['nba']);
                if (empty($nbaGames)) {
                    $io->error('No NBA game found today!');
                    return 0;
                }
                foreach ($nbaGames as $game) {
                    $responses[$game['identifier']] = $client->request('GET', $game['playlist-uri']);
                }
                foreach ($responses as $gameIdentifier => $response) {
                    if (\preg_match(PLAYLIST_REGEXP_PATTERN, $response->getContent(), $matches)) {
                        $playlistUris[$gameIdentifier] = $matches[1];
                    }
                    unset($response);
                }
                if (empty($playlistUris)) {
                    $io->error(\sprintf('No stream found with %s', $sports['nba']['search-uri']));
                    return 0;
                }
                $gameQuestion = new ChoiceQuestion(
                    \sprintf('Select your game [<comment>%s</comment>]', $lastCall['game'] ?? '?'),
                    \array_map(function ($game) { return $game['identifier']; }, $nbaGames),
                    $lastCall['game'] ?? null
                );
                $game = $questionHelper->ask($input, $output, $gameQuestion);
                $callArgs['game'] = $game;
                $playlistUri = $playlistUris[$game];
                break;
            case 'f1':
                $response = $client->request('GET', $sports['f1']['search-uri']);
                if (\preg_match(PLAYLIST_REGEXP_PATTERN, $response->getContent(), $matches)) {
                    $playlistUri = $matches[1];
                } else {
                    $io->error(\sprintf('No F1 live found with %s', $sports['f1']['search-uri']));
                    return 0;
                }
                unset($response);
                break;
            default:
                throw new \InvalidArgumentException('Invalid selected sport!');
        }

        $playlistContent = $client->request('GET', $playlistUri)->getContent();
        $chunklists = getM3u8Chunklists($playlistUri, $playlistContent);

        $resolutionQuestion = new ChoiceQuestion(
            \sprintf('Select your resolution [<comment>%s</comment>]', $lastCall['resolution'] ?? '?'),
            \array_keys($chunklists),
            $lastCall['resolution'] ?? null
        );
        $resolution = $questionHelper->ask($input, $output, $resolutionQuestion);
        $callArgs['resolution'] = $resolution;

        $cmd = \sprintf('omxplayer \'%s\'', $chunklists[$resolution]);
        $io->comment($cmd);

        writeLastCall($callArgs);

        $processHelper = $this->getHelper('process');
        $process = new Process(['omxplayer', $chunklists[$resolution]]);
        $process->setTimeout(null);
        $processHelper->run($output, $process);
    })
    ->run();

function listNbaDayGames(HttpClient $client, array $nbaReferential): array
{
    $today = new \DateTimeImmutable('today', new \DateTimezone('America/New_York'));

    $nbaApiGamesData = $client->request(
        'GET',
        \sprintf('https://data.nba.net/data/10s/prod/v1/%s/scoreboard.json', $today->format('Ymd'))
    )->toArray();

    $gamesData = [];
    foreach ($nbaApiGamesData['games'] as $apiGameData) {
        $gamesData[] = [
            'identifier' => \sprintf('%s-%s', $apiGameData['hTeam']['triCode'], $apiGameData['vTeam']['triCode']),
            'on-air' => $apiGameData['isGameActivated'],
            'ended' => isset($apiGameData['endTimeUTC']),
            'start-at' => new \DateTimeImmutable($apiGameData['startTimeUTC']),
            'playlist-uri' => \sprintf(
                $nbaReferential['search-uri'],
                $nbaReferential['teams'][$apiGameData['hTeam']['triCode']]
            ),
        ];
    }

    \usort($gamesData, function ($a, $b) {
        return ($b['on-air'] > $a['on-air']) || ($b['start-at'] < $a['start-at']) || ($b['ended'] < $a['ended']);
    });

    return $gamesData;
}

function getLastFilePath(): string
{
    return \sprintf(LASTCALL_FILEPATH, $_SERVER['HOME']);
}

function writeLastCall(array $lastCall): void
{
    $filesystem = new Filesystem();

    if (!$filesystem->exists(\dirname(getLastFilePath()))) {
        $filesystem->mkdir(\dirname(getLastFilePath()));
    }

    $filesystem->dumpFile(getLastFilePath(), json_encode($lastCall));
}

function getLastCall(): ?array
{
    $filesystem = new Filesystem();

    if (!$filesystem->exists(getLastFilePath())) {
        return null;
    }

    $lastCallContent = \file_get_contents(getLastFilePath());

    return \json_decode($lastCallContent, true);
}

function getM3u8Chunklists(string $playlistUri, string $playlistContent): array
{
    $m3u8Parser = new ParserFacade();
    $m3u8ChunkLists = $m3u8Parser->parse(new TextStream($playlistContent));

    $chunklists = [];

    foreach ($m3u8ChunkLists['EXT-X-STREAM-INF'] as $m3u8ChunkList) {
        $resolution = $m3u8ChunkList['RESOLUTION']->__toString();
        $uri = \sprintf('%s/%s', \dirname($playlistUri), $m3u8ChunkList['uri']);

        if (false === \strpos($uri, '/../')) {
            $chunklists[$resolution] = $uri;
        } else {
            $parsedUri = \parse_url($uri);
            $chunklists[$resolution] = \sprintf(
                '%s://%s%s',
                $parsedUri['scheme'],
                $parsedUri['host'],
                resolveDoubleDottedPath($parsedUri['path'])
            );
        }
    }

    return $chunklists;
}

function resolveDoubleDottedPath(string $unresolvedPath): string
{
    if (false === \strpos($unresolvedPath, '/..')) {
        return $unresolvedPath;
    }

    $pathParts = \explode('/..', $unresolvedPath, 2);

    return resolveDoubleDottedPath(\dirname($pathParts[0]).$pathParts[1]);
}