#!/usr/bin/env php
<?php
require __DIR__.'/../vendor/autoload.php';

use Chrisyue\PhpM3u8\Facade\ParserFacade;
use Chrisyue\PhpM3u8\Stream\TextStream;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\HttpClient\HttpClient;
use Symfony\Component\Process\Process;

const PLAYLIST_RETRIEVER_URL_PATTERN = 'http://givemenbastreams.com/nba.php?g=%s';

$teamsList = [
    'bucks',
    'bulls',
    'cavaliers',
    'celtics',
    'clippers',
    'grizzlies',
    'hawks',
    'heat',
    'hornets',
    'jazz',
    'kings',
    'knicks',
    'lakers',
    'magic',
    'mavericks',
    'nuggets',
    'pacers',
    'pelicans',
    'pistons',
    'raptors',
    'rockets',
    'sixers',
    'spurs',
    'suns',
    'thunder',
    'timberwolves',
    'trailblazers', // blazers ?
    'warriors',
    'wizards',
];

function getM3u8Chunklists(string $playlistUri, string $playlistContent): array
{
    $m3u8Parser = new ParserFacade();
    $m3u8ChunkLists = $m3u8Parser->parse(new TextStream($playlistContent));

    $chunklists = [];

    foreach ($m3u8ChunkLists['EXT-X-STREAM-INF'] as $m3u8ChunkList) {
        $resolution = $m3u8ChunkList['RESOLUTION']->__toString();
        $uri = \sprintf('%s/%s', \dirname($playlistUri), $m3u8ChunkList['uri']);

        if (false === \strpos($uri, '/../')) {
            $chunklists[$resolution] = $uri;
        } else {
            $parsedUri = \parse_url($uri);
            $chunklists[$resolution] = \sprintf(
                '%s://%s%s',
                $parsedUri['scheme'],
                $parsedUri['host'],
                resolveDoubleDottedPath($parsedUri['path'])
            );
        }
    }

    return $chunklists;
}

function resolveDoubleDottedPath(string $unresolvedPath): string
{
    if (false === \strpos($unresolvedPath, '/..')) {
        return $unresolvedPath;
    }

    $pathParts = \explode('/..', $unresolvedPath, 2);

    return resolveDoubleDottedPath(\dirname($pathParts[0]).$pathParts[1]);
}

(new SingleCommandApplication())
    ->setDescription('Stream NBA games with OMX Player')
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($teamsList) {
        $client = HttpClient::create();
        foreach ($teamsList as $teamName) {
            $responses[$teamName] = $client->request('GET', \sprintf(PLAYLIST_RETRIEVER_URL_PATTERN, $teamName));
        }
        foreach ($responses as $teamName => $response) {
            if (\preg_match('@source: \'([A-Za-z/.-_]+playlist\.m3u8)\',@', $response->getContent(), $matches)) {
                $games[$teamName]['playlist'] = $matches[1];
            }
            unset($response);
        }

        $io = new SymfonyStyle($input, $output);

        if (empty($games)) {
            $io->error(\sprintf('No NBA game found with %s', PLAYLIST_RETRIEVER_URL_PATTERN));

            return 0;
        }


        $questionHelper = $this->getHelper('question');

        $gameQuestion = new ChoiceQuestion('Select your game !', \array_keys($games));
        $game = $questionHelper->ask($input, $output, $gameQuestion);

        $playlistContent = $client->request('GET', $games[$game]['playlist'])->getContent();

        $chunklists = getM3u8Chunklists($games[$game]['playlist'], $playlistContent);

        $resolutionQuestion = new ChoiceQuestion('Select your resolution !', \array_keys($chunklists));
        $resolution = $questionHelper->ask($input, $output, $resolutionQuestion);

        $cmd = \sprintf('omxplayer \'%s\'', $chunklists[$resolution]);
        $io->comment($cmd);

        $processHelper = $this->getHelper('process');
        $process = new Process(['omxplayer', $chunklists[$resolution]]);
        $process->setTimeout(null);
        $processHelper->run($output, $process);
    })
    ->run();